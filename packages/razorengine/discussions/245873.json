[
  {
    "Id": "565557",
    "ThreadId": "245873",
    "Html": "\r\n<p>Is there any convenient way to get the script line number for a compilation error (as opposed to the error in the generated C# code)?</p>\r\n",
    "PostedDate": "2011-02-13T13:35:18.513-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "566976",
    "ThreadId": "245873",
    "Html": "<p>It's not that easy to generate a line number from a compilation exception. The TemplateCompilationException is thrown after parsing, so at this stage it has no context from which to derive line and position, etc. You can get line and column numbers from  a TemplateParsingException, but you have to enable strict mode to do so (parsing exceptions are disabled by default). To enable strict mode, create a new instance of TemplateService:</p>\n<p>&nbsp;</p>\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: blue;\">var</span> service = TemplateServiceFactory.CreateTemplateService(Language.CSharp, <span style=\"color: blue;\">true</span>);\n<span style=\"color: blue;\">string</span> template = <span style=\"color: #a31515;\">\"Hello @{Model\"</span>;\n\n<span style=\"color: blue;\">string</span> result = service.Parse(template, <span style=\"color: blue;\">new</span> { Name = <span style=\"color: #a31515;\">\"World\"</span> });\n</pre>\n</div>\n<p>The markup in this example should cause a TemplateParsingException which has Line and Column properties detailing the location of the parsing exception.</p>",
    "PostedDate": "2011-02-16T00:57:54.147-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "670665",
    "ThreadId": "245873",
    "Html": "<p>I had the same problem with needing the line number from the template and not the generated code. I investigated the problem and found a way to do it but it required changing the RazorEngine source.</p>\r\n<p>The key was to rebase the line numbers before the TemplateCompilationException was thrown. So I ended up modifying the CompileType method in DirectCompilerServiceBase.cs to the following:</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">override</span> Type CompileType(TypeContext context)\r\n        {\r\n            CompilerResults results = <span style=\"color: blue;\">this</span>.Compile(context);\r\n\r\n            <span style=\"color: blue;\">if</span> (results.Errors != <span style=\"color: blue;\">null</span> &amp;&amp; results.Errors.Count &gt; 0)\r\n            {\r\n                <span style=\"color: blue;\">var</span> rebasedErrors = <span style=\"color: blue;\">new</span> CompilerErrorCollection();\r\n\r\n                <span style=\"color: green;\">//get generated code</span>\r\n                <span style=\"color: blue;\">var</span> writer = <span style=\"color: blue;\">new</span> StringWriter();\r\n                <span style=\"color: blue;\">this</span>.CodeDomProvider.GenerateCodeFromCompileUnit(<span style=\"color: blue;\">this</span>.GetCodeCompileUnit(context.ClassName, context.TemplateContent, context.Namespaces,\r\n                                                                      context.TemplateType, context.ModelType), writer, <span style=\"color: blue;\">new</span> CodeGeneratorOptions());\r\n                \r\n                <span style=\"color: blue;\">var</span> generatedCode = writer.ToString().Split(<span style=\"color: blue;\">new</span>[] {Environment.NewLine}, StringSplitOptions.None);\r\n                <span style=\"color: blue;\">var</span> templateCode = context.TemplateContent.Replace(<span style=\"color: #a31515;\">\"\\r\\n\"</span>, <span style=\"color: #a31515;\">\"\\n\"</span>).Split(<span style=\"color: blue;\">new</span>[] {<span style=\"color: #a31515;\">\"\\n\"</span>}, StringSplitOptions.None);\r\n                <span style=\"color: blue;\">foreach</span> (CompilerError error <span style=\"color: blue;\">in</span> results.Errors)\r\n                {\r\n                    <span style=\"color: blue;\">var</span> errorLine = generatedCode[error.Line - 1];\r\n                    <span style=\"color: blue;\">if</span> (templateCode.Length &lt;= 0) <span style=\"color: blue;\">continue</span>;\r\n                    \r\n                    <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">var</span> lineNumber = 0; lineNumber &lt; templateCode.Count(); lineNumber++)\r\n                    {\r\n                        <span style=\"color: blue;\">var</span> templateCodeLine = templateCode[lineNumber];\r\n                        <span style=\"color: blue;\">var</span> column = templateCodeLine.IndexOf(errorLine.Trim());\r\n                        <span style=\"color: blue;\">if</span> (column &lt;= 0) <span style=\"color: blue;\">continue</span>;\r\n                        rebasedErrors.Add(<span style=\"color: blue;\">new</span> CompilerError(error.FileName, lineNumber + 1, column, error.ErrorNumber, error.ErrorText));\r\n                        <span style=\"color: blue;\">break</span>;\r\n                    }\r\n                }\r\n                <span style=\"color: blue;\">throw</span> <span style=\"color: blue;\">new</span> TemplateCompilationException(rebasedErrors);\r\n            }\r\n\r\n            <span style=\"color: blue;\">return</span> results.CompiledAssembly.GetType(<span style=\"color: #a31515;\">\"CompiledRazorTemplates.Dynamic.\"</span> + context.ClassName);\r\n        }\r\n\r\n</pre>\r\n</div>\r\n</p>\r\n<p>The method works in the following way. <strong>IF</strong> there is an error, I generate the code again to get the generated source of the template. Then I iterate through the CompilerError collection and for each error, I find the corresponding error in the template code. Then I create a new CompilerError with the matching line and column number. Finally after each CompilerError has been rebased, I throw that collection of errors instead.&nbsp;</p>\r\n<p>This all seems to work for us, hopefully you'll find it as useful.</p>",
    "PostedDate": "2011-09-12T09:28:22.323-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "831314",
    "ThreadId": "245873",
    "Html": "<p>Won't this work? Works in mine. I'm using .Net 4.0</p>\n<p>try{<br />&nbsp;&nbsp;&nbsp; ...<br />}<br />catch (TemplateCompilationException e)<br />{<br />&nbsp;&nbsp;&nbsp; /*<br />&nbsp;&nbsp;&nbsp; &nbsp;* Catch any template issues and spit out the file name and line numbers because this<br />&nbsp;&nbsp;&nbsp; &nbsp;* doesn't happen by default.<br />&nbsp;&nbsp;&nbsp; &nbsp;*/<br />&nbsp;&nbsp;&nbsp; StringBuilder errorList = new StringBuilder();<br />&nbsp;&nbsp;&nbsp; errorList.AppendFormat(\"{0}\", lastTemplateFile);<br />&nbsp;&nbsp;&nbsp; errorList.AppendLine();<br />&nbsp;&nbsp;&nbsp; errorList.AppendLine();<br />&nbsp;&nbsp;&nbsp; errorList.AppendFormat(\"{0}\", e.Message);<br />&nbsp;&nbsp;&nbsp; errorList.AppendLine();<br />&nbsp;&nbsp;&nbsp; errorList.AppendLine();<br />&nbsp;&nbsp;&nbsp; errorList.AppendLine(\"Line numbers:\");<br />&nbsp;&nbsp;&nbsp; foreach (var error in e.Errors)<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; errorList.AppendFormat(\"\\t({0}, {1})\", error.Line, error.Column);<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; errorList.AppendLine();<br />&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; errorList.AppendLine();<br /><br />&nbsp;&nbsp;&nbsp; if (_showExceptions)<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Utils.WriteError(errorList.ToString());<br /><br />&nbsp;&nbsp;&nbsp; return -1;<br />}</p>",
    "PostedDate": "2012-05-02T13:31:43.413-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]