{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 0,
    "Custom": null,
    "Description": "I'm using entity framework 4.0 (POCO) and razor engine together, when I write the razor template content as like <a href=\"@Model.Url\" />, this template parses and run correctly when the Model is a common class object, but throws an error while the Model was auto-generated by entityframework. The exception details is:\nCS023417\nc:\\Users\\Administrator\\AppData\\Local\\Temp\\bczrfuyy.0.cs\nThe type or namespace name 'DynamicProxies' does not exist in the namespace 'System.Data.Entity' (are you missing an assembly reference?)\n \nI'm not sure if this is a bug or not, otherwise what should I do with this case? \n \nThanks a lot!",
    "LastUpdatedDate": "2014-05-26T01:56:55.237-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "razorengine",
    "ReportedDate": "2011-03-28T19:55:43.857-07:00",
    "Status": {
      "Name": "Proposed",
      "Id": 1
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "razor throw an error while the model is a dynamic-generated object from entityframework",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 3,
    "Id": 368
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "in additional, I found that the assemblies generated by entity framework 4, which contains dynamic-generated objects, were loaded to AppDomain, but the razor engine didn't probe the assemblies while resolving the types.  Are there any ways to load the custom assemblies to razor engine? for example, it could be Razor.LoadAssembly(...) or Razor.DynamicDirectory=...\r\n",
      "PostedDate": "2011-03-29T00:34:02.663-07:00",
      "Id": -2147483648
    },
    {
      "Message": "I'm under the impression that this error is related to the same error as the nUnit issues we had (have?) with it not referencing an assembly that wasn't loaded in memory at the time. Try forcing a reference in your code to a class or object within DynamicProxies library. Maybe have a class implement DynamicProxies.IProxy  - this may or may not work and unfortunately Antaris knows more about this issue than I do. I'm sure he'll chime in eventually.",
      "PostedDate": "2011-03-29T07:13:55.64-07:00",
      "Id": -2147483648
    },
    {
      "Message": "Oh, you can also add assemblies using the config section referenced <a href='http://razorengine.codeplex.com/wikipage?title=Using%20Configuration&referringTitle=Documentation'>here</a>",
      "PostedDate": "2011-03-29T07:14:47.93-07:00",
      "Id": -2147483648
    },
    {
      "Message": "Hi,\r\n\r\nI've yet to start playing round properly with EF4 yet, but is the generated assembly at runtime (dynamic) assembly, or a known-compiled assembly with code generated by the designer? When we are loading assemblies referenced in the current AppDomain, we filter out any dynamically generated assemblies.",
      "PostedDate": "2011-03-29T11:43:06.113-07:00",
      "Id": -2147483648
    },
    {
      "Message": "thanks for reply.\r\nthe generated assembly was generated at runtime, it is a in-memory assembly, the generated assembly was named like 'EntityFrameworkDynamicProxies-xxxxx.yyyy...'. I can get the generated assembly on the event of AppDomain.CurrentDomain.AssemblyLoad on the Application_Start in global.asax. So if the razor engine support to add a reference here, that would be fine. However, I think that would be better if the razor engine could auto-reference all the assemblies loaded in the AppDomain. \r\n\r\nfor BuildStarted: thanks, I've tried that way, the problem is that the generated assembly is not loaded. and the reference namespace is unknown. When debuging, I can see the generated object type would be \"System.Data.Entity.DynamicProxies.WebSite-xxxxxxxxxxxxxxx\", the WebSite is my known class.\r\n",
      "PostedDate": "2011-03-29T18:45:45.38-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-02-21T17:17:04.22-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2014-02-11T06:39:17.153-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2014-05-26T01:56:55.237-07:00",
      "Id": -2147483648
    }
  ]
}