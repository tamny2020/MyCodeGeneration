{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": "2011-08-26T08:27:14.247-07:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "When using a template that has an Include with a model object passed in, that template cache's the objects values on the next run.\n \nScenario:\n \nWe have a complex template that contains Includes of other templates and we also pass in a model to that template.\n \n      <html><span>Model.Name</span> @Include(\"Header\", Model.List)</html>\n \nSo, when I iterate thru this to send that same template with a different Model, the main template will have the correct values of the Model, but the subsequent templates will use the first Model's instance everytime it calls the Include. The value of Model.List will be of the first Model, not the current Model.\n \nIs there a way to force the parse, or run, to not cache the Include when it is given a Model?\n \nI had to flatten my template by not using the Includes, which really sucked.",
    "LastUpdatedDate": "2013-05-16T04:38:18.18-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "razorengine",
    "ReportedDate": "2011-05-12T13:49:03.867-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Caching @Include Model data.",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 2,
    "Id": 411
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "I've created this quick sample and it works as expected. Though I think I found a bug in the Includes that I'll have to work out.\r\n\r\n            RazorEngine.Razor.Compile(\"@Model.Name\", \"SubTemplate\");\r\n            Model model = new Model() { User = new User() { Name = \"Ben\" } };\r\n            var x = RazorEngine.Razor.Parse<Model>(\"@Include(\\\"SubTemplate\\\", Model.User)\", model, \"includes\");\r\n            model.User.Name = \"Dornis\";\r\n            var y = RazorEngine.Razor.Parse<Model>(\"@Include(\\\"SubTemplate\\\", Model.User)\", model, \"includes\");\r\n\r\nIs this, in it's basic form, what you're doing?",
      "PostedDate": "2011-05-12T14:54:36.503-07:00",
      "Id": -2147483648
    },
    {
      "Message": "I had a unit test that showed the behavior I explained. I tried isolating the unit tests so I can package it and send it to you. But, the behavior isnt the same. It's working as I thought it should. I need to determine what is different. \r\n\r\nWhat was the other issue you found?",
      "PostedDate": "2011-05-13T10:03:36.323-07:00",
      "Id": -2147483648
    },
    {
      "Message": "I found that the Include statement possibly outputs twice. I still need to do some checking though to verify. I think we're writing to the parent, returning to the result and then writing that result to the parent again.",
      "PostedDate": "2011-05-16T08:23:35.47-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2011-05-20T05:18:31.537-07:00",
      "Id": -2147483648
    },
    {
      "Message": "The caching mechanism in v3 is completely different and now only caches the template type. Each call to get the template will spin up a new instance, so this problem essentially disappears (as does the duplicate rendering from @Includes).",
      "PostedDate": "2011-08-26T08:27:04.007-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2011-08-26T08:27:14.247-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-02-21T17:17:03.04-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-05-16T04:38:18.18-07:00",
      "Id": -2147483648
    }
  ]
}